(set-option :print-success false)
(set-logic QF_S)
; benchmark generated from python API
(set-info :status unknown)
(declare-fun S () String)

(push 5)
  (assert
   (let ((?x17 (re.union re.allchar (re.++ (re.++ (str.to.re "a") (str.to.re "g'\r'b")) re.allchar))))
   (let (($x19 (not (str.in.re S ?x17))))
   (let (($x10 (str.in.re S (re.union re.allchar (str.to.re "b")))))
   (let (($x22 (and $x10 $x10)))
   (let (($x44 (and $x22 $x19)))
   (let (($x106 (not $x44)))
   (let (($x174 (not $x106)))
   (not $x174)))))))))
  (assert
   (let ((?x17 (re.union re.allchar (re.++ (re.++ (str.to.re "a") (str.to.re "g'\r'b")) re.allchar))))
   (let (($x19 (not (str.in.re S ?x17))))
   (let (($x34 (and $x19 $x19)))
   (let (($x102 (not $x34)))
   (let (($x172 (not $x102)))
   (let (($x10 (str.in.re S (re.union re.allchar (str.to.re "b")))))
   (let (($x22 (and $x10 $x10)))
   (let (($x23 (not $x22)))
   (let (($x43 (not $x23)))
   (let (($x54 (not $x43)))
   (let (($x193 (and $x23 $x54)))
   (let (($x92 (and $x193 $x172)))
   (let (($x31 (and $x10 $x23)))
   (let (($x35 (and $x31 $x23)))
   (let (($x164 (and $x35 $x54)))
   (let (($x131 (and $x172 $x164)))
   (let (($x95 (and $x131 $x92)))
   (let (($x456 (not $x95)))
   (let (($x479 (not $x456)))
   (not $x479)))))))))))))))))))))
  (assert
   (let (($x10 (str.in.re S (re.union re.allchar (str.to.re "b")))))
   (let (($x22 (and $x10 $x10)))
   (let (($x36 (and $x10 $x22)))
   (let ((?x17 (re.union re.allchar (re.++ (re.++ (str.to.re "a") (str.to.re "g'\r'b")) re.allchar))))
   (let (($x19 (not (str.in.re S ?x17))))
   (let (($x32 (and $x19 $x36)))
   (let (($x27 (not $x32)))
   (let (($x66 (not $x27)))
   (let (($x69 (not $x66)))
   (let (($x23 (not $x22)))
   (let (($x31 (and $x10 $x23)))
   (let (($x25 (not $x10)))
   (let (($x45 (and $x25 $x31)))
   (let (($x52 (not $x45)))
   (let (($x55 (and $x23 $x52)))
   (let (($x179 (and $x55 $x69)))
   (let (($x29 (and $x23 $x32)))
   (let (($x51 (and $x31 $x29)))
   (let (($x268 (and $x51 $x179)))
   (not $x268)))))))))))))))))))))
  (assert
   (let (($x10 (str.in.re S (re.union re.allchar (str.to.re "b")))))
   (let (($x22 (and $x10 $x10)))
   (let (($x23 (not $x22)))
   (let (($x31 (and $x10 $x23)))
   (let (($x25 (not $x10)))
   (let (($x45 (and $x25 $x31)))
   (let (($x52 (not $x45)))
   (let (($x55 (and $x23 $x52)))
   (let (($x63 (not $x55)))
   (let (($x185 (and $x63 $x63)))
   (let (($x60 (and $x22 $x31)))
   (let (($x65 (not $x60)))
   (let (($x140 (not $x65)))
   (let (($x36 (and $x10 $x22)))
   (let ((?x17 (re.union re.allchar (re.++ (re.++ (str.to.re "a") (str.to.re "g'\r'b")) re.allchar))))
   (let (($x19 (not (str.in.re S ?x17))))
   (let (($x32 (and $x19 $x36)))
   (let (($x27 (not $x32)))
   (let (($x38 (not $x25)))
   (let (($x24 (and $x38 $x27)))
   (let (($x30 (and $x24 $x22)))
   (let (($x29 (and $x23 $x32)))
   (let (($x42 (not $x30)))
   (let (($x46 (and $x42 $x29)))
   (let (($x59 (and $x46 $x30)))
   (let (($x43 (not $x23)))
   (let (($x54 (not $x43)))
   (let (($x193 (and $x23 $x54)))
   (let (($x75 (and $x193 $x59)))
   (let (($x100 (and $x55 $x43)))
   (let (($x125 (and $x100 $x75)))
   (let (($x66 (not $x27)))
   (let (($x153 (and $x66 $x125)))
   (let (($x280 (and $x153 $x140)))
   (let (($x310 (and $x280 $x185)))
   (not $x310)))))))))))))))))))))))))))))))))))))
  (assert
   (let (($x10 (str.in.re S (re.union re.allchar (str.to.re "b")))))
   (let (($x22 (and $x10 $x10)))
   (let (($x23 (not $x22)))
   (let (($x31 (and $x10 $x23)))
   (let (($x35 (and $x31 $x23)))
   (let (($x25 (not $x10)))
   (let (($x26 (and $x23 $x25)))
   (let (($x57 (not $x26)))
   (let (($x58 (and $x57 $x31)))
   (let (($x110 (and $x58 $x35)))
   (let (($x133 (not $x110)))
   (let (($x178 (not $x133)))
   (not $x178))))))))))))))
(check-sat)
